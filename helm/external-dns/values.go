// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package externaldns

type Values struct {
	// Affinity corresponds to the JSON schema field "affinity".
	Affinity ValuesAffinity `json:"affinity,omitempty" yaml:"affinity,omitempty" mapstructure:"affinity,omitempty"`

	// AutomountServiceAccountToken corresponds to the JSON schema field
	// "automountServiceAccountToken".
	AutomountServiceAccountToken interface{} `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// CommonLabels corresponds to the JSON schema field "commonLabels".
	CommonLabels ValuesCommonLabels `json:"commonLabels,omitempty" yaml:"commonLabels,omitempty" mapstructure:"commonLabels,omitempty"`

	// DeploymentAnnotations corresponds to the JSON schema field
	// "deploymentAnnotations".
	DeploymentAnnotations ValuesDeploymentAnnotations `json:"deploymentAnnotations,omitempty" yaml:"deploymentAnnotations,omitempty" mapstructure:"deploymentAnnotations,omitempty"`

	// DeploymentStrategy corresponds to the JSON schema field "deploymentStrategy".
	DeploymentStrategy *ValuesDeploymentStrategy `json:"deploymentStrategy,omitempty" yaml:"deploymentStrategy,omitempty" mapstructure:"deploymentStrategy,omitempty"`

	// DnsConfig corresponds to the JSON schema field "dnsConfig".
	DnsConfig interface{} `json:"dnsConfig,omitempty" yaml:"dnsConfig,omitempty" mapstructure:"dnsConfig,omitempty"`

	// DnsPolicy corresponds to the JSON schema field "dnsPolicy".
	DnsPolicy interface{} `json:"dnsPolicy,omitempty" yaml:"dnsPolicy,omitempty" mapstructure:"dnsPolicy,omitempty"`

	// DomainFilters corresponds to the JSON schema field "domainFilters".
	DomainFilters []interface{} `json:"domainFilters,omitempty" yaml:"domainFilters,omitempty" mapstructure:"domainFilters,omitempty"`

	// Env corresponds to the JSON schema field "env".
	Env []interface{} `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// ExcludeDomains corresponds to the JSON schema field "excludeDomains".
	ExcludeDomains []interface{} `json:"excludeDomains,omitempty" yaml:"excludeDomains,omitempty" mapstructure:"excludeDomains,omitempty"`

	// ExtraArgs corresponds to the JSON schema field "extraArgs".
	ExtraArgs []string `json:"extraArgs,omitempty" yaml:"extraArgs,omitempty" mapstructure:"extraArgs,omitempty"`

	// ExtraContainers corresponds to the JSON schema field "extraContainers".
	ExtraContainers ValuesExtraContainers `json:"extraContainers,omitempty" yaml:"extraContainers,omitempty" mapstructure:"extraContainers,omitempty"`

	// ExtraVolumeMounts corresponds to the JSON schema field "extraVolumeMounts".
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// ExtraVolumes corresponds to the JSON schema field "extraVolumes".
	ExtraVolumes []interface{} `json:"extraVolumes,omitempty" yaml:"extraVolumes,omitempty" mapstructure:"extraVolumes,omitempty"`

	// FullnameOverride corresponds to the JSON schema field "fullnameOverride".
	FullnameOverride interface{} `json:"fullnameOverride,omitempty" yaml:"fullnameOverride,omitempty" mapstructure:"fullnameOverride,omitempty"`

	// Global corresponds to the JSON schema field "global".
	Global *ValuesGlobal `json:"global,omitempty" yaml:"global,omitempty" mapstructure:"global,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// ImagePullSecrets corresponds to the JSON schema field "imagePullSecrets".
	ImagePullSecrets []ValuesImagePullSecretsElem `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty" mapstructure:"imagePullSecrets,omitempty"`

	// InitContainers corresponds to the JSON schema field "initContainers".
	InitContainers []interface{} `json:"initContainers,omitempty" yaml:"initContainers,omitempty" mapstructure:"initContainers,omitempty"`

	// Interval corresponds to the JSON schema field "interval".
	Interval *string `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// LabelFilter corresponds to the JSON schema field "labelFilter".
	LabelFilter *string `json:"labelFilter,omitempty" yaml:"labelFilter,omitempty" mapstructure:"labelFilter,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// LogFormat corresponds to the JSON schema field "logFormat".
	LogFormat ValuesLogFormat `json:"logFormat,omitempty" yaml:"logFormat,omitempty" mapstructure:"logFormat,omitempty"`

	// LogLevel corresponds to the JSON schema field "logLevel".
	LogLevel ValuesLogLevel `json:"logLevel,omitempty" yaml:"logLevel,omitempty" mapstructure:"logLevel,omitempty"`

	// ManagedRecordTypes corresponds to the JSON schema field "managedRecordTypes".
	ManagedRecordTypes []string `json:"managedRecordTypes,omitempty" yaml:"managedRecordTypes,omitempty" mapstructure:"managedRecordTypes,omitempty"`

	// NameOverride corresponds to the JSON schema field "nameOverride".
	NameOverride interface{} `json:"nameOverride,omitempty" yaml:"nameOverride,omitempty" mapstructure:"nameOverride,omitempty"`

	// Namespaced corresponds to the JSON schema field "namespaced".
	Namespaced *bool `json:"namespaced,omitempty" yaml:"namespaced,omitempty" mapstructure:"namespaced,omitempty"`

	// NodeSelector corresponds to the JSON schema field "nodeSelector".
	NodeSelector ValuesNodeSelector `json:"nodeSelector,omitempty" yaml:"nodeSelector,omitempty" mapstructure:"nodeSelector,omitempty"`

	// PodAnnotations corresponds to the JSON schema field "podAnnotations".
	PodAnnotations ValuesPodAnnotations `json:"podAnnotations,omitempty" yaml:"podAnnotations,omitempty" mapstructure:"podAnnotations,omitempty"`

	// PodLabels corresponds to the JSON schema field "podLabels".
	PodLabels ValuesPodLabels `json:"podLabels,omitempty" yaml:"podLabels,omitempty" mapstructure:"podLabels,omitempty"`

	// PodSecurityContext corresponds to the JSON schema field "podSecurityContext".
	PodSecurityContext *ValuesPodSecurityContext `json:"podSecurityContext,omitempty" yaml:"podSecurityContext,omitempty" mapstructure:"podSecurityContext,omitempty"`

	// Policy corresponds to the JSON schema field "policy".
	Policy ValuesPolicy `json:"policy,omitempty" yaml:"policy,omitempty" mapstructure:"policy,omitempty"`

	// PriorityClassName corresponds to the JSON schema field "priorityClassName".
	PriorityClassName interface{} `json:"priorityClassName,omitempty" yaml:"priorityClassName,omitempty" mapstructure:"priorityClassName,omitempty"`

	// Provider corresponds to the JSON schema field "provider".
	Provider *ValuesProvider `json:"provider,omitempty" yaml:"provider,omitempty" mapstructure:"provider,omitempty"`

	// Rbac corresponds to the JSON schema field "rbac".
	Rbac *ValuesRbac `json:"rbac,omitempty" yaml:"rbac,omitempty" mapstructure:"rbac,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Registry corresponds to the JSON schema field "registry".
	Registry ValuesRegistry `json:"registry,omitempty" yaml:"registry,omitempty" mapstructure:"registry,omitempty"`

	// Resources corresponds to the JSON schema field "resources".
	Resources *ValuesResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// RevisionHistoryLimit corresponds to the JSON schema field
	// "revisionHistoryLimit".
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty" yaml:"revisionHistoryLimit,omitempty" mapstructure:"revisionHistoryLimit,omitempty"`

	// SecretConfiguration corresponds to the JSON schema field "secretConfiguration".
	SecretConfiguration *ValuesSecretConfiguration `json:"secretConfiguration,omitempty" yaml:"secretConfiguration,omitempty" mapstructure:"secretConfiguration,omitempty"`

	// SecurityContext corresponds to the JSON schema field "securityContext".
	SecurityContext *ValuesSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceAccount corresponds to the JSON schema field "serviceAccount".
	ServiceAccount *ValuesServiceAccount `json:"serviceAccount,omitempty" yaml:"serviceAccount,omitempty" mapstructure:"serviceAccount,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`

	// ShareProcessNamespace corresponds to the JSON schema field
	// "shareProcessNamespace".
	ShareProcessNamespace *bool `json:"shareProcessNamespace,omitempty" yaml:"shareProcessNamespace,omitempty" mapstructure:"shareProcessNamespace,omitempty"`

	// Sources corresponds to the JSON schema field "sources".
	Sources []string `json:"sources,omitempty" yaml:"sources,omitempty" mapstructure:"sources,omitempty"`

	// TerminationGracePeriodSeconds corresponds to the JSON schema field
	// "terminationGracePeriodSeconds".
	TerminationGracePeriodSeconds interface{} `json:"terminationGracePeriodSeconds,omitempty" yaml:"terminationGracePeriodSeconds,omitempty" mapstructure:"terminationGracePeriodSeconds,omitempty"`

	// Tolerations corresponds to the JSON schema field "tolerations".
	Tolerations []interface{} `json:"tolerations,omitempty" yaml:"tolerations,omitempty" mapstructure:"tolerations,omitempty"`

	// TopologySpreadConstraints corresponds to the JSON schema field
	// "topologySpreadConstraints".
	TopologySpreadConstraints []interface{} `json:"topologySpreadConstraints,omitempty" yaml:"topologySpreadConstraints,omitempty" mapstructure:"topologySpreadConstraints,omitempty"`

	// TriggerLoopOnEvent corresponds to the JSON schema field "triggerLoopOnEvent".
	TriggerLoopOnEvent *bool `json:"triggerLoopOnEvent,omitempty" yaml:"triggerLoopOnEvent,omitempty" mapstructure:"triggerLoopOnEvent,omitempty"`

	// TxtOwnerId corresponds to the JSON schema field "txtOwnerId".
	TxtOwnerId *string `json:"txtOwnerId,omitempty" yaml:"txtOwnerId,omitempty" mapstructure:"txtOwnerId,omitempty"`

	// TxtPrefix corresponds to the JSON schema field "txtPrefix".
	TxtPrefix *string `json:"txtPrefix,omitempty" yaml:"txtPrefix,omitempty" mapstructure:"txtPrefix,omitempty"`

	// TxtSuffix corresponds to the JSON schema field "txtSuffix".
	TxtSuffix *string `json:"txtSuffix,omitempty" yaml:"txtSuffix,omitempty" mapstructure:"txtSuffix,omitempty"`

	AdditionalProperties interface{} `mapstructure:",remain"`
}

type ValuesAffinity map[string]interface{}

type ValuesCommonLabels map[string]interface{}

type ValuesDeploymentAnnotations map[string]interface{}

type ValuesDeploymentStrategy struct {
	// Type corresponds to the JSON schema field "type".
	Type *ValuesDeploymentStrategyType `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	AdditionalProperties interface{} `mapstructure:",remain"`
}

type ValuesDeploymentStrategyType string

const ValuesDeploymentStrategyTypeRecreate ValuesDeploymentStrategyType = "Recreate"
const ValuesDeploymentStrategyTypeRollingUpdate ValuesDeploymentStrategyType = "RollingUpdate"

type ValuesExtraContainers map[string]interface{}

type ValuesGlobal struct {
	// ImagePullSecrets corresponds to the JSON schema field "imagePullSecrets".
	ImagePullSecrets []ValuesGlobalImagePullSecretsElem `json:"imagePullSecrets,omitempty" yaml:"imagePullSecrets,omitempty" mapstructure:"imagePullSecrets,omitempty"`
}

type ValuesGlobalImagePullSecretsElem map[string]interface{}

type ValuesImage struct {
	// PullPolicy corresponds to the JSON schema field "pullPolicy".
	PullPolicy *ValuesImagePullPolicy `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Repository corresponds to the JSON schema field "repository".
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag corresponds to the JSON schema field "tag".
	Tag *string `json:"tag,omitempty" yaml:"tag,omitempty" mapstructure:"tag,omitempty"`
}

type ValuesImagePullPolicy string

const ValuesImagePullPolicyAlways ValuesImagePullPolicy = "Always"
const ValuesImagePullPolicyIfNotPresent ValuesImagePullPolicy = "IfNotPresent"

type ValuesImagePullSecretsElem map[string]interface{}

type ValuesLivenessProbe struct {
	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// HttpGet corresponds to the JSON schema field "httpGet".
	HttpGet *ValuesLivenessProbeHttpGet `json:"httpGet,omitempty" yaml:"httpGet,omitempty" mapstructure:"httpGet,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesLivenessProbeHttpGet struct {
	// Path corresponds to the JSON schema field "path".
	Path *string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *string `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesLogFormat string

const ValuesLogFormatJson ValuesLogFormat = "json"
const ValuesLogFormatText ValuesLogFormat = "text"

type ValuesLogLevel string

const ValuesLogLevelDebug ValuesLogLevel = "debug"
const ValuesLogLevelError ValuesLogLevel = "error"
const ValuesLogLevelFatal ValuesLogLevel = "fatal"
const ValuesLogLevelInfo ValuesLogLevel = "info"
const ValuesLogLevelPanic ValuesLogLevel = "panic"
const ValuesLogLevelWarning ValuesLogLevel = "warning"

type ValuesNodeSelector map[string]interface{}

type ValuesPodAnnotations map[string]interface{}

type ValuesPodLabels map[string]interface{}

type ValuesPodSecurityContext struct {
	// FsGroup corresponds to the JSON schema field "fsGroup".
	FsGroup *int `json:"fsGroup,omitempty" yaml:"fsGroup,omitempty" mapstructure:"fsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// SeccompProfile corresponds to the JSON schema field "seccompProfile".
	SeccompProfile *ValuesPodSecurityContextSeccompProfile `json:"seccompProfile,omitempty" yaml:"seccompProfile,omitempty" mapstructure:"seccompProfile,omitempty"`
}

type ValuesPodSecurityContextSeccompProfile struct {
	// Type corresponds to the JSON schema field "type".
	Type *string `json:"type,omitempty" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

type ValuesPolicy string

const ValuesPolicySync ValuesPolicy = "sync"
const ValuesPolicyUpsertOnly ValuesPolicy = "upsert-only"

type ValuesProvider struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`

	// Webhook corresponds to the JSON schema field "webhook".
	Webhook *ValuesProviderWebhook `json:"webhook,omitempty" yaml:"webhook,omitempty" mapstructure:"webhook,omitempty"`
}

type ValuesProviderWebhook struct {
	// Args corresponds to the JSON schema field "args".
	Args []interface{} `json:"args,omitempty" yaml:"args,omitempty" mapstructure:"args,omitempty"`

	// Env corresponds to the JSON schema field "env".
	Env []interface{} `json:"env,omitempty" yaml:"env,omitempty" mapstructure:"env,omitempty"`

	// ExtraVolumeMounts corresponds to the JSON schema field "extraVolumeMounts".
	ExtraVolumeMounts []interface{} `json:"extraVolumeMounts,omitempty" yaml:"extraVolumeMounts,omitempty" mapstructure:"extraVolumeMounts,omitempty"`

	// Image corresponds to the JSON schema field "image".
	Image *ValuesProviderWebhookImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Limits corresponds to the JSON schema field "limits".
	Limits *ValuesProviderWebhookLimits `json:"limits,omitempty" yaml:"limits,omitempty" mapstructure:"limits,omitempty"`

	// LivenessProbe corresponds to the JSON schema field "livenessProbe".
	LivenessProbe *ValuesProviderWebhookLivenessProbe `json:"livenessProbe,omitempty" yaml:"livenessProbe,omitempty" mapstructure:"livenessProbe,omitempty"`

	// ReadinessProbe corresponds to the JSON schema field "readinessProbe".
	ReadinessProbe *ValuesProviderWebhookReadinessProbe `json:"readinessProbe,omitempty" yaml:"readinessProbe,omitempty" mapstructure:"readinessProbe,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests *ValuesProviderWebhookRequests `json:"requests,omitempty" yaml:"requests,omitempty" mapstructure:"requests,omitempty"`

	// Resources corresponds to the JSON schema field "resources".
	Resources ValuesProviderWebhookResources `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// SecurityContext corresponds to the JSON schema field "securityContext".
	SecurityContext ValuesProviderWebhookSecurityContext `json:"securityContext,omitempty" yaml:"securityContext,omitempty" mapstructure:"securityContext,omitempty"`

	// Service corresponds to the JSON schema field "service".
	Service *ValuesProviderWebhookService `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// ServiceMonitor corresponds to the JSON schema field "serviceMonitor".
	ServiceMonitor *ValuesProviderWebhookServiceMonitor `json:"serviceMonitor,omitempty" yaml:"serviceMonitor,omitempty" mapstructure:"serviceMonitor,omitempty"`
}

type ValuesProviderWebhookImage struct {
	// PullPolicy corresponds to the JSON schema field "pullPolicy".
	PullPolicy *string `json:"pullPolicy,omitempty" yaml:"pullPolicy,omitempty" mapstructure:"pullPolicy,omitempty"`

	// Repository corresponds to the JSON schema field "repository".
	Repository interface{} `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag corresponds to the JSON schema field "tag".
	Tag interface{} `json:"tag,omitempty" yaml:"tag,omitempty" mapstructure:"tag,omitempty"`
}

type ValuesProviderWebhookLimits struct {
	// Cpu corresponds to the JSON schema field "cpu".
	Cpu *string `json:"cpu,omitempty" yaml:"cpu,omitempty" mapstructure:"cpu,omitempty"`

	// Memory corresponds to the JSON schema field "memory".
	Memory *string `json:"memory,omitempty" yaml:"memory,omitempty" mapstructure:"memory,omitempty"`
}

type ValuesProviderWebhookLivenessProbe struct {
	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// HttpGet corresponds to the JSON schema field "httpGet".
	HttpGet *ValuesProviderWebhookLivenessProbeHttpGet `json:"httpGet,omitempty" yaml:"httpGet,omitempty" mapstructure:"httpGet,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesProviderWebhookLivenessProbeHttpGet struct {
	// Path corresponds to the JSON schema field "path".
	Path *string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *string `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesProviderWebhookReadinessProbe struct {
	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// HttpGet corresponds to the JSON schema field "httpGet".
	HttpGet *ValuesProviderWebhookReadinessProbeHttpGet `json:"httpGet,omitempty" yaml:"httpGet,omitempty" mapstructure:"httpGet,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesProviderWebhookReadinessProbeHttpGet struct {
	// Path corresponds to the JSON schema field "path".
	Path *string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *string `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesProviderWebhookRequests struct {
	// Cpu corresponds to the JSON schema field "cpu".
	Cpu *string `json:"cpu,omitempty" yaml:"cpu,omitempty" mapstructure:"cpu,omitempty"`

	// Memory corresponds to the JSON schema field "memory".
	Memory *string `json:"memory,omitempty" yaml:"memory,omitempty" mapstructure:"memory,omitempty"`
}

type ValuesProviderWebhookResources map[string]interface{}

type ValuesProviderWebhookSecurityContext map[string]interface{}

type ValuesProviderWebhookService struct {
	// Port corresponds to the JSON schema field "port".
	Port *int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesProviderWebhookServiceMonitor struct {
	// BearerTokenFile corresponds to the JSON schema field "bearerTokenFile".
	BearerTokenFile interface{} `json:"bearerTokenFile,omitempty" yaml:"bearerTokenFile,omitempty" mapstructure:"bearerTokenFile,omitempty"`

	// Interval corresponds to the JSON schema field "interval".
	Interval interface{} `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// MetricRelabelings corresponds to the JSON schema field "metricRelabelings".
	MetricRelabelings []interface{} `json:"metricRelabelings,omitempty" yaml:"metricRelabelings,omitempty" mapstructure:"metricRelabelings,omitempty"`

	// Relabelings corresponds to the JSON schema field "relabelings".
	Relabelings []interface{} `json:"relabelings,omitempty" yaml:"relabelings,omitempty" mapstructure:"relabelings,omitempty"`

	// Scheme corresponds to the JSON schema field "scheme".
	Scheme interface{} `json:"scheme,omitempty" yaml:"scheme,omitempty" mapstructure:"scheme,omitempty"`

	// ScrapeTimeout corresponds to the JSON schema field "scrapeTimeout".
	ScrapeTimeout interface{} `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`

	// TlsConfig corresponds to the JSON schema field "tlsConfig".
	TlsConfig ValuesProviderWebhookServiceMonitorTlsConfig `json:"tlsConfig,omitempty" yaml:"tlsConfig,omitempty" mapstructure:"tlsConfig,omitempty"`
}

type ValuesProviderWebhookServiceMonitorTlsConfig map[string]interface{}

type ValuesRbac struct {
	// AdditionalPermissions corresponds to the JSON schema field
	// "additionalPermissions".
	AdditionalPermissions []interface{} `json:"additionalPermissions,omitempty" yaml:"additionalPermissions,omitempty" mapstructure:"additionalPermissions,omitempty"`

	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	AdditionalProperties interface{} `mapstructure:",remain"`
}

type ValuesReadinessProbe struct {
	// FailureThreshold corresponds to the JSON schema field "failureThreshold".
	FailureThreshold *int `json:"failureThreshold,omitempty" yaml:"failureThreshold,omitempty" mapstructure:"failureThreshold,omitempty"`

	// HttpGet corresponds to the JSON schema field "httpGet".
	HttpGet *ValuesReadinessProbeHttpGet `json:"httpGet,omitempty" yaml:"httpGet,omitempty" mapstructure:"httpGet,omitempty"`

	// InitialDelaySeconds corresponds to the JSON schema field "initialDelaySeconds".
	InitialDelaySeconds *int `json:"initialDelaySeconds,omitempty" yaml:"initialDelaySeconds,omitempty" mapstructure:"initialDelaySeconds,omitempty"`

	// PeriodSeconds corresponds to the JSON schema field "periodSeconds".
	PeriodSeconds *int `json:"periodSeconds,omitempty" yaml:"periodSeconds,omitempty" mapstructure:"periodSeconds,omitempty"`

	// SuccessThreshold corresponds to the JSON schema field "successThreshold".
	SuccessThreshold *int `json:"successThreshold,omitempty" yaml:"successThreshold,omitempty" mapstructure:"successThreshold,omitempty"`

	// TimeoutSeconds corresponds to the JSON schema field "timeoutSeconds".
	TimeoutSeconds *int `json:"timeoutSeconds,omitempty" yaml:"timeoutSeconds,omitempty" mapstructure:"timeoutSeconds,omitempty"`
}

type ValuesReadinessProbeHttpGet struct {
	// Path corresponds to the JSON schema field "path".
	Path *string `json:"path,omitempty" yaml:"path,omitempty" mapstructure:"path,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port *string `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesRegistry string

const ValuesRegistryAwsSd ValuesRegistry = "aws-sd"
const ValuesRegistryDynamodb ValuesRegistry = "dynamodb"
const ValuesRegistryNoop ValuesRegistry = "noop"
const ValuesRegistryTxt ValuesRegistry = "txt"

type ValuesResources struct {
	// Limits corresponds to the JSON schema field "limits".
	Limits *ValuesResourcesLimits `json:"limits,omitempty" yaml:"limits,omitempty" mapstructure:"limits,omitempty"`

	// Requests corresponds to the JSON schema field "requests".
	Requests *ValuesResourcesRequests `json:"requests,omitempty" yaml:"requests,omitempty" mapstructure:"requests,omitempty"`
}

type ValuesResourcesLimits struct {
	// Cpu corresponds to the JSON schema field "cpu".
	Cpu *string `json:"cpu,omitempty" yaml:"cpu,omitempty" mapstructure:"cpu,omitempty"`

	// Memory corresponds to the JSON schema field "memory".
	Memory *string `json:"memory,omitempty" yaml:"memory,omitempty" mapstructure:"memory,omitempty"`
}

type ValuesResourcesRequests struct {
	// Cpu corresponds to the JSON schema field "cpu".
	Cpu *string `json:"cpu,omitempty" yaml:"cpu,omitempty" mapstructure:"cpu,omitempty"`

	// Memory corresponds to the JSON schema field "memory".
	Memory *string `json:"memory,omitempty" yaml:"memory,omitempty" mapstructure:"memory,omitempty"`
}

type ValuesSecretConfiguration struct {
	// Data corresponds to the JSON schema field "data".
	Data ValuesSecretConfigurationData `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// MountPath corresponds to the JSON schema field "mountPath".
	MountPath *string `json:"mountPath,omitempty" yaml:"mountPath,omitempty" mapstructure:"mountPath,omitempty"`

	// SubPath corresponds to the JSON schema field "subPath".
	SubPath *string `json:"subPath,omitempty" yaml:"subPath,omitempty" mapstructure:"subPath,omitempty"`
}

type ValuesSecretConfigurationData map[string]interface{}

type ValuesSecurityContext struct {
	// AllowPrivilegeEscalation corresponds to the JSON schema field
	// "allowPrivilegeEscalation".
	AllowPrivilegeEscalation *bool `json:"allowPrivilegeEscalation,omitempty" yaml:"allowPrivilegeEscalation,omitempty" mapstructure:"allowPrivilegeEscalation,omitempty"`

	// Capabilities corresponds to the JSON schema field "capabilities".
	Capabilities *ValuesSecurityContextCapabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty" mapstructure:"capabilities,omitempty"`

	// Privileged corresponds to the JSON schema field "privileged".
	Privileged *bool `json:"privileged,omitempty" yaml:"privileged,omitempty" mapstructure:"privileged,omitempty"`

	// ReadOnlyRootFilesystem corresponds to the JSON schema field
	// "readOnlyRootFilesystem".
	ReadOnlyRootFilesystem *bool `json:"readOnlyRootFilesystem,omitempty" yaml:"readOnlyRootFilesystem,omitempty" mapstructure:"readOnlyRootFilesystem,omitempty"`

	// RunAsGroup corresponds to the JSON schema field "runAsGroup".
	RunAsGroup *int `json:"runAsGroup,omitempty" yaml:"runAsGroup,omitempty" mapstructure:"runAsGroup,omitempty"`

	// RunAsNonRoot corresponds to the JSON schema field "runAsNonRoot".
	RunAsNonRoot *bool `json:"runAsNonRoot,omitempty" yaml:"runAsNonRoot,omitempty" mapstructure:"runAsNonRoot,omitempty"`

	// RunAsUser corresponds to the JSON schema field "runAsUser".
	RunAsUser *int `json:"runAsUser,omitempty" yaml:"runAsUser,omitempty" mapstructure:"runAsUser,omitempty"`
}

type ValuesSecurityContextCapabilities struct {
	// Drop corresponds to the JSON schema field "drop".
	Drop []string `json:"drop,omitempty" yaml:"drop,omitempty" mapstructure:"drop,omitempty"`
}

type ValuesService struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesServiceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// IpFamilies corresponds to the JSON schema field "ipFamilies".
	IpFamilies []ValuesServiceIpFamiliesElem `json:"ipFamilies,omitempty" yaml:"ipFamilies,omitempty" mapstructure:"ipFamilies,omitempty"`

	// IpFamilyPolicy corresponds to the JSON schema field "ipFamilyPolicy".
	IpFamilyPolicy *ValuesServiceIpFamilyPolicy `json:"ipFamilyPolicy,omitempty" yaml:"ipFamilyPolicy,omitempty" mapstructure:"ipFamilyPolicy,omitempty"`

	// Port corresponds to the JSON schema field "port".
	Port int `json:"port,omitempty" yaml:"port,omitempty" mapstructure:"port,omitempty"`
}

type ValuesServiceAccount struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesServiceAccountAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// AutomountServiceAccountToken corresponds to the JSON schema field
	// "automountServiceAccountToken".
	AutomountServiceAccountToken interface{} `json:"automountServiceAccountToken,omitempty" yaml:"automountServiceAccountToken,omitempty" mapstructure:"automountServiceAccountToken,omitempty"`

	// Create corresponds to the JSON schema field "create".
	Create *bool `json:"create,omitempty" yaml:"create,omitempty" mapstructure:"create,omitempty"`

	// Labels corresponds to the JSON schema field "labels".
	Labels ValuesServiceAccountLabels `json:"labels,omitempty" yaml:"labels,omitempty" mapstructure:"labels,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name interface{} `json:"name,omitempty" yaml:"name,omitempty" mapstructure:"name,omitempty"`
}

type ValuesServiceAccountAnnotations map[string]interface{}

type ValuesServiceAccountLabels map[string]interface{}

type ValuesServiceAnnotations map[string]interface{}

type ValuesServiceIpFamiliesElem string

const ValuesServiceIpFamiliesElemIPv4 ValuesServiceIpFamiliesElem = "IPv4"
const ValuesServiceIpFamiliesElemIPv6 ValuesServiceIpFamiliesElem = "IPv6"

type ValuesServiceIpFamilyPolicy struct {
	Value interface{}
}

type ValuesServiceMonitor struct {
	// AdditionalLabels corresponds to the JSON schema field "additionalLabels".
	AdditionalLabels ValuesServiceMonitorAdditionalLabels `json:"additionalLabels,omitempty" yaml:"additionalLabels,omitempty" mapstructure:"additionalLabels,omitempty"`

	// Annotations corresponds to the JSON schema field "annotations".
	Annotations ValuesServiceMonitorAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// BearerTokenFile corresponds to the JSON schema field "bearerTokenFile".
	BearerTokenFile interface{} `json:"bearerTokenFile,omitempty" yaml:"bearerTokenFile,omitempty" mapstructure:"bearerTokenFile,omitempty"`

	// Enabled corresponds to the JSON schema field "enabled".
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`

	// Interval corresponds to the JSON schema field "interval".
	Interval interface{} `json:"interval,omitempty" yaml:"interval,omitempty" mapstructure:"interval,omitempty"`

	// MetricRelabelings corresponds to the JSON schema field "metricRelabelings".
	MetricRelabelings []interface{} `json:"metricRelabelings,omitempty" yaml:"metricRelabelings,omitempty" mapstructure:"metricRelabelings,omitempty"`

	// Namespace corresponds to the JSON schema field "namespace".
	Namespace interface{} `json:"namespace,omitempty" yaml:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Relabelings corresponds to the JSON schema field "relabelings".
	Relabelings []interface{} `json:"relabelings,omitempty" yaml:"relabelings,omitempty" mapstructure:"relabelings,omitempty"`

	// Scheme corresponds to the JSON schema field "scheme".
	Scheme interface{} `json:"scheme,omitempty" yaml:"scheme,omitempty" mapstructure:"scheme,omitempty"`

	// ScrapeTimeout corresponds to the JSON schema field "scrapeTimeout".
	ScrapeTimeout interface{} `json:"scrapeTimeout,omitempty" yaml:"scrapeTimeout,omitempty" mapstructure:"scrapeTimeout,omitempty"`

	// TargetLabels corresponds to the JSON schema field "targetLabels".
	TargetLabels []interface{} `json:"targetLabels,omitempty" yaml:"targetLabels,omitempty" mapstructure:"targetLabels,omitempty"`

	// TlsConfig corresponds to the JSON schema field "tlsConfig".
	TlsConfig ValuesServiceMonitorTlsConfig `json:"tlsConfig,omitempty" yaml:"tlsConfig,omitempty" mapstructure:"tlsConfig,omitempty"`
}

type ValuesServiceMonitorAdditionalLabels map[string]interface{}

type ValuesServiceMonitorAnnotations map[string]interface{}

type ValuesServiceMonitorTlsConfig map[string]interface{}
